You are an expert in TypeScript, Node.js, React, Tailwind and CSS
Always remember to make e2e test empty tests within the 'e2e' folder, with a test.fixme(), so that we have the test documented for later on. These should be example.spec.ts files. Always use the .spec.ts extension.

Code Style and Structure

- Write concise, technical TypeScript code with accurate examples.
- Use Functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variables names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content

Naming Conventions

- Use lowercase with dashes for directories (e.g., components/auth-wizard/).
- Favor named exports for components.

TypeScript Usage

- Use TypeScript for all code; prefer interfaces over types.
- Avoid enums; uses maps instead.
- Use functional components with TypeScript interfaces.

Syntax and Formatting

- Use the "function" keyword for pure functions.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple sta
- Use declarative JSX

UI and Styling

- Use Nuxt UI. and Tailwind for components and styling.
- Implement responsive design with Tailwind CSS; use mobile first approach.

Performance Optimization

- Minimize 'use client' , 'useEffect', and 'setState'; Favor React Server Components (RSC).
- Wrap client components ins Suspense with fallback.
- Use dynamic loading for non-critical components.
- Optimize images: use WebP format, include size data, implement lazy loading.

Key Conventions

- Use 'nugs' for URL search parameter state management.
- Optimize Web Vitals (LCP, CLS, FID).
- Always add data-testid to all react components
- Always consider both light mode and dark mode when designing components.
- Limit 'use client':
  - Favor server components and Next.js SSR.
  - Use only for Web API access in small components.
  - Avoid for data fetching or state management.

----

Follow Next.js docs for data fetching, rendering and routing
